{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hollyhenaghan/Documents/L3T11/star-wars/pages/post.js\",\n    _this = this;\n\nimport Layout from '../components/MyLayout.js';\nimport fetch from 'isomorphic-unfetch';\n\nvar Post = function Post(props) {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"gender: \", props.gender]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"height: \", props.person.height]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"hair color: \", props.person.hair_color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"skin color: \", props.person.skin_color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"eye color: \", props.person.eye_color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 8\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, _this);\n};\n/* Here we once again use getInitialProps. This time we retrieve\r\ndata from the TVMaze API using the ID passed through from index.js.\r\nThe first argument of the function is the context object. \r\nIt has a query field that we can use to fetch information.\r\nIn our example, we picked the show ID from query params and fetched its show data from the TVMaze API. */\n\n\n_c = Post;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var id, res, data, person;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id;\n            _context.next = 3;\n            return fetch(\"http://swapi.dev/api/people/?search=r2-d2\");\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            data = _context.sent;\n            person = data.results;\n            console.log(\"Fetched character: \".concat(person.name));\n            return _context.abrupt(\"return\", {\n              person: person\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/hollyhenaghan/Documents/L3T11/star-wars/pages/post.js"],"names":["Layout","fetch","Post","props","name","gender","person","height","hair_color","skin_color","eye_color","getInitialProps","context","id","query","res","json","data","results","console","log"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD;AAAA,sBACT,QAAC,MAAD;AAAA,4BACG;AAAA,gBAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,aADH,eAEG;AAAA,6BAAYD,KAAK,CAACE,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,aAFH,eAGG;AAAA,6BAAYF,KAAK,CAACG,MAAN,CAAaC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,aAHH,eAIG;AAAA,iCAAgBJ,KAAK,CAACG,MAAN,CAAaE,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,aAJH,eAKG;AAAA,iCAAgBL,KAAK,CAACG,MAAN,CAAaG,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,aALH,eAMG;AAAA,gCAAeN,KAAK,CAACG,MAAN,CAAaI,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,aANH;AAAA;AAAA;AAAA;AAAA;AAAA,WADS;AAAA,CAAb;AAWA;AACA;AACA;AACA;AACA;;;KAfMR,I;;AAgBNA,IAAI,CAACS,eAAL;AAAA,sEAAuB,iBAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,EADa,GACND,OAAO,CAACE,KADF,CACbD,EADa;AAAA;AAAA,mBAEHZ,KAAK,6CAFF;;AAAA;AAEfc,YAAAA,GAFe;AAAA;AAAA,mBAGFA,GAAG,CAACC,IAAJ,EAHE;;AAAA;AAGfC,YAAAA,IAHe;AAIfX,YAAAA,MAJe,GAINW,IAAI,CAACC,OAJC;AAMrBC,YAAAA,OAAO,CAACC,GAAR,8BAAkCd,MAAM,CAACF,IAAzC;AANqB,6CAQd;AAAEE,cAAAA,MAAM,EAANA;AAAF,aARc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAWA,eAAeJ,IAAf","sourcesContent":["import Layout from '../components/MyLayout.js'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst Post = (props) => (\r\n    <Layout>\r\n       <h1>{props.name}</h1>\r\n       <p>gender: {props.gender}</p>\r\n       <p>height: {props.person.height}</p>\r\n       <p>hair color: {props.person.hair_color}</p>\r\n       <p>skin color: {props.person.skin_color}</p>\r\n       <p>eye color: {props.person.eye_color}</p>\r\n    </Layout>\r\n)\r\n\r\n/* Here we once again use getInitialProps. This time we retrieve\r\ndata from the TVMaze API using the ID passed through from index.js.\r\nThe first argument of the function is the context object. \r\nIt has a query field that we can use to fetch information.\r\nIn our example, we picked the show ID from query params and fetched its show data from the TVMaze API. */\r\nPost.getInitialProps = async function (context) {\r\n  const { id } = context.query\r\n  const res = await fetch(`http://swapi.dev/api/people/?search=r2-d2`)\r\n  const data = await res.json()\r\n  const person = data.results\r\n\r\n  console.log(`Fetched character: ${person.name}`)\r\n\r\n  return { person }\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}