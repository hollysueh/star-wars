{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hollyhenaghan/Documents/L3T11/star-wars/pages/post.js\";\nimport Layout from '../components/MyLayout.js';\nimport fetch from 'isomorphic-unfetch';\n\nconst Post = props => /*#__PURE__*/_jsxDEV(Layout, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: props.person\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 8\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"gender: \", props.person.gender]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 8\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"height: \", props.person.height]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 8\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"hair color: \", props.person.hair_color]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 8\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"skin color: \", props.person.skin_color]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 8\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"eye color: \", props.person.eye_color]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 8\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 5\n}, this);\n/* Here we once again use getInitialProps. This time we retrieve\r\ndata from the TVMaze API using the ID passed through from index.js.\r\nThe first argument of the function is the context object. \r\nIt has a query field that we can use to fetch information.\r\nIn our example, we picked the show ID from query params and fetched its show data from the TVMaze API. */\n\n\nPost.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const res = await fetch(`http://swapi.dev/api/people/?search=${id}/`);\n  const person = await res.json();\n  console.log(`Fetched show: ${person.name}`);\n  return {\n    person\n  };\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/hollyhenaghan/Documents/L3T11/star-wars/pages/post.js"],"names":["Layout","fetch","Post","props","person","gender","height","hair_color","skin_color","eye_color","getInitialProps","context","id","query","res","json","console","log","name"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,iBACT,QAAC,MAAD;AAAA,0BACG;AAAA,cAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,UADH,eAEG;AAAA,2BAAYD,KAAK,CAACC,MAAN,CAAaC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,UAFH,eAGG;AAAA,2BAAYF,KAAK,CAACC,MAAN,CAAaE,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,UAHH,eAIG;AAAA,+BAAgBH,KAAK,CAACC,MAAN,CAAaG,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,UAJH,eAKG;AAAA,+BAAgBJ,KAAK,CAACC,MAAN,CAAaI,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,UALH,eAMG;AAAA,8BAAeL,KAAK,CAACC,MAAN,CAAaK,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,UANH;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAWA;AACA;AACA;AACA;AACA;;;AACAP,IAAI,CAACQ,eAAL,GAAuB,gBAAgBC,OAAhB,EAAyB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAASD,OAAO,CAACE,KAAvB;AACA,QAAMC,GAAG,GAAG,MAAMb,KAAK,CAAE,uCAAsCW,EAAG,GAA3C,CAAvB;AACA,QAAMR,MAAM,GAAG,MAAMU,GAAG,CAACC,IAAJ,EAArB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBb,MAAM,CAACc,IAAK,EAAzC;AAEA,SAAO;AAAEd,IAAAA;AAAF,GAAP;AACD,CARD;;AAUA,eAAeF,IAAf","sourcesContent":["import Layout from '../components/MyLayout.js'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst Post = (props) => (\r\n    <Layout>\r\n       <h1>{props.person}</h1>\r\n       <p>gender: {props.person.gender}</p>\r\n       <p>height: {props.person.height}</p>\r\n       <p>hair color: {props.person.hair_color}</p>\r\n       <p>skin color: {props.person.skin_color}</p>\r\n       <p>eye color: {props.person.eye_color}</p>\r\n    </Layout>\r\n)\r\n\r\n/* Here we once again use getInitialProps. This time we retrieve\r\ndata from the TVMaze API using the ID passed through from index.js.\r\nThe first argument of the function is the context object. \r\nIt has a query field that we can use to fetch information.\r\nIn our example, we picked the show ID from query params and fetched its show data from the TVMaze API. */\r\nPost.getInitialProps = async function (context) {\r\n  const { id } = context.query\r\n  const res = await fetch(`http://swapi.dev/api/people/?search=${id}/`)\r\n  const person = await res.json()\r\n\r\n  console.log(`Fetched show: ${person.name}`)\r\n\r\n  return { person }\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}