{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hollyhenaghan/Documents/L3T11/star-wars/pages/index.js\",\n    _this = this;\n\nimport Layout from '../components/MyLayout.js';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nvar Index = function Index(props) {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Star Wars Characters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.people.map(function (_ref) {\n        var person = _ref.person;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            as: \"/p/\".concat(person),\n            href: \"/post?name=\".concat(person),\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: person\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 13,\n              columnNumber: 13\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 11\n          }, _this)\n        }, person.results.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 9\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, _this);\n};\n/*In practice, we usually need to fetch data from a remote data source. \r\nNext.js comes with a standard API to fetch data for pages. \r\nWe do it using an async function called getInitialProps.\r\nWith that, we can fetch data for a given page via a remote data source and pass it as props to our page. \r\nWe can write our getInitialProps to work on both server and the client. So, Next.js can use it on both client and server.\r\nIn the code below, we are fetching Batman TV shows and passing them into our page as the 'shows' prop. */\n\n\n_c = Index;\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('http://swapi.dev/api/people/?page=1');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.count));\n          console.log('Data: ' + data);\n          return _context.abrupt(\"return\", {\n            people: data.results\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/hollyhenaghan/Documents/L3T11/star-wars/pages/index.js"],"names":["Layout","Link","fetch","Index","props","people","map","person","results","name","getInitialProps","res","json","data","console","log","count"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD;AAAA,sBACZ,QAAC,MAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA,gBACGA,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB;AAAA,YAAEC,MAAF,QAAEA,MAAF;AAAA,4BAChB;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,eAAQA,MAAR,CAAR;AAA0B,YAAA,IAAI,uBAAgBA,MAAhB,CAA9B;AAAA,mCACE;AAAA,wBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,WAASA,MAAM,CAACC,OAAP,CAAeC,IAAxB;AAAA;AAAA;AAAA;AAAA,iBADgB;AAAA,OAAjB;AADH;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADY;AAAA,CAAd;AAeA;AACA;AACA;AACA;AACA;AACA;;;KApBMN,K;AAqBNA,KAAK,CAACO,eAAN,yEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACJR,KAAK,CAAC,qCAAD,CADD;;AAAA;AAChBS,UAAAA,GADgB;AAAA;AAAA,iBAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAItBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,KAA9C;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAWF,IAAvB;AALsB,2CAOf;AACLR,YAAAA,MAAM,EAAEQ,IAAI,CAACL;AADR,WAPe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAYA,eAAeL,KAAf","sourcesContent":["import Layout from '../components/MyLayout.js'\r\nimport Link from 'next/link'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\n\r\nconst Index = (props) => (\r\n  <Layout>\r\n    <h1>Star Wars Characters</h1>\r\n    <ul>\r\n      {props.people.map(({person}) => (\r\n        <li key={person.results.name}>\r\n          <Link as={`/p/${person}`} href={`/post?name=${person}`}>\r\n            <a>{person}</a>\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </Layout>\r\n)\r\n\r\n/*In practice, we usually need to fetch data from a remote data source. \r\nNext.js comes with a standard API to fetch data for pages. \r\nWe do it using an async function called getInitialProps.\r\nWith that, we can fetch data for a given page via a remote data source and pass it as props to our page. \r\nWe can write our getInitialProps to work on both server and the client. So, Next.js can use it on both client and server.\r\nIn the code below, we are fetching Batman TV shows and passing them into our page as the 'shows' prop. */\r\nIndex.getInitialProps = async function() {\r\n  const res = await fetch('http://swapi.dev/api/people/?page=1')\r\n  const data = await res.json()\r\n\r\n  console.log(`Show data fetched. Count: ${data.count}`)\r\n  console.log('Data: ' + data)\r\n\r\n  return {\r\n    people: data.results\r\n  }\r\n}\r\n\r\nexport default Index"]},"metadata":{},"sourceType":"module"}